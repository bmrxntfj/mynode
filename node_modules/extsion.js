exports.dateFormat = function (date,fmt) {
    var o = {
        "M+": date.getMonth() + 1, //月份     
        "d+": date.getDate(), //日     
        "h+": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12, //小时     
        "H+": date.getHours(), //小时     
        "m+": date.getMinutes(), //分     
        "s+": date.getSeconds(), //秒     
        "q+": Math.floor((date.getMonth() + 3) / 3), //季度     
        "S": date.getMilliseconds() //毫秒     
    };
    var week = {
        "0": "/u65e5",
        "1": "/u4e00",
        "2": "/u4e8c",
        "3": "/u4e09",
        "4": "/u56db",
        "5": "/u4e94",
        "6": "/u516d"
    };
    if (/(y+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
    }
    if (/(E+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? "/u661f/u671f" : "/u5468") : "") + week[date.getDay() + ""]);
    }
    for (var k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        }
    }
    return fmt;
};
exports.stringFormat = function (str,args) {
    return str.replace(/\{(\d+)\}/g, function (m, i) { return args[i]; });
}
exports.stringIsEmpty = function (str) { return str.length == 0; }
exports.arrayClear = function (arr) {
    arr.length = 0;
}
exports.arrayFirst = function (arr) {
    return arr[0];
}
exports.arrayLast = function (arr) {
    return arr[arr.length - 1];
}
exports.arrayInsert = function (arr,obj) {
    arr.splice(0, 0, obj);
}
exports.arrayInsertAt = function (arr,index, obj) {
    arr.splice(index, 0, obj);
}
exports.arrayRemoveAt = function (arr,index) {
    arr.splice(index, 1);
}
exports.arrayRemoveFirst = function (arr) {
    arr.splice(0, 1);
}
exports.arrayRemoveLast = function () {
    if (arr.length > 0) {
        arr.length = arr.length - 1;
    }
}
exports.arrayRemove = function (arr,obj) {
    var index = -1;
    exports.each(arr, function (item, i) {
        if (item == obj) {
            index = i;
            return false;
        }
    }, this);
    if (index >= 0) {
        this.removeAt(index);
    }
}
exports.arrayMax = function (arr) {
    return Math.max.apply({}, arr)
}
exports.arrayMin = function (arr) {
    return Math.min.apply({}, arr)
}
exports.arrayContains = function (arr,obj, compareFn) {
    var ret = false;
    if (exports.isFunction(compareFn)) {
        exports.each(arr, function (item) {
            ret = compareFn(obj, item);
            return !ret;
        }, arr);
        return ret;
    }
    return arr.indexOf(obj) > 0;
}
exports.arrayGet = function (arr,pro) {
    var pros = [];
    exports.each(arr, function (item) {
        pros.push(item[pro]);
    }, arr);
    return pros;
}
exports.each=function (arr, fn, scope) {
        if (exports.isArray(arr) && typeof (fn) == 'function') {
            var context = null;
            for (var i = 0; i < arr.length; i++) {
                scope = scope ? scope : {};

                context = fn.call(scope, arr[i], i, arr.length, context);
                if (context == false) { break; }
            }
        }
    }
exports.isArray= function (value) {
	return Object.prototype.toString.call(value) === '[object Array]';
}
exports.isObject= function (value) {
    return typeof (value) == 'object';
}
exports.isString= function (value) {
	return typeof (value) == 'string';
}
exports.isFunction= function (value) {
	return typeof (value) == 'function';
}
exports.isNumber= function (value) {
	return typeof (value) == 'number';
}
exports.isDate= function (value) {
	return Object.prototype.toString.call(value) == '[object Date]';
}
exports.apply=function (object, config, defaults) {
    if (config === null) { return object; }
    if (defaults) {
        exports.apply(object, defaults);
    }
    for (var p in config) {
        object[p] = config[p];
    }
    return object;
}
exports.getDefineParams=function(fun){return fun.toString()
  .replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s))/mg,'')
  .match(/^function\s*[^\(]*\(\s*([^\)]*)\)/m)[1]
  .split(/,/);}