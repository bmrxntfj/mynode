var http = require('http');
var util = require('util');
var url = require('url');
var querystring=require('querystring');
var extsion=require('extsion');
var formidable = require('formidable');
var sys = require('sys');
var log=require('log');
var fs=require('fs');

exports.run = function (app) {
    var server=http.createServer(function (req, res) {
        try{
            var context = { request: req, response: res };
            
            switch (req.method.toLowerCase()) {
                case 'get': {
                    get(context,app);
                    break;
                }
                case 'post': {
                     post(context,app);
                     break;
                }
                default:{
                    throw req.method+' not implement';
                }
            }
        }
      catch(ex){
        var text=JSON.stringify({success:false,errors: extsion.isObject(ex)?ex.message:ex});
        log.error(text);
        console.log(text);
        res.write(text);
        res.end();
    }});
    server.listen(app.port, app.host);

    console.log(extsion.stringFormat('Server running at http://{0}:{1}/',[app.host,app.port]));
}

function handle(context, app) {
	extsion.each(app.routes,function(route){
		if(route.pattern.test(context.params.pathname.toLowerCase())){
			route.handle.run(context);
			return false;
		}
		else{
			console.log(context.params.pathname);
		}
	});
}

function get(context, app){
    var queryparams = url.parse(context.request.url,true,true);
    context.params = queryparams;
    handle(context, app);
}

function post(context, app){
    console.log('post');
    context.params = url.parse(context.request.url,true,true);
    var contentType=context.request.headers['content-type'].toLowerCase();
    if(contentType.indexOf('application/x-www-form-urlencoded')!=-1){
        postData(context,app);
    }
    else if(contentType.indexOf('multipart/form-data')!=-1){
        postFile(context,app);
    }
    else{
        throw contentType+' not implement.';
    }
}

function postData(context,app){
    console.log('post data');
    var postdata = '';
    context.request.on('data', function (chunk) {
        postdata += chunk;
    });
    context.request.on('end', function () {
        var postparmas = querystring.parse(postdata);
        for (var p in postparmas) { 
            postparmas[p] = eval(postparmas[p]); 
        }
        extsion.apply(context.params.query,postparmas);
        handle(context, app);
    });
}

function postFile(context,app){
    console.log('post file');
    extsion.each(app.uploads,function(upload){
            if(upload.pattern.test(context.params.pathname.toLowerCase())){
                var form = new formidable.IncomingForm();
                form.uploadDir=upload.path;
                form.parse(context.request, function(err,fields, files) {  
                    if(!extsion.isArray(files)){ files=[files];}
                    extsion.each(files,function(file){
                        var f=null;
                        for(var p in file){f=file[p];}
                        fs.renameSync( f.path, upload.path+ f.name );
                    });
                    context.response.write(JSON.stringify({success:true}));
                    context.response.end();
                });  
            }
            else{
                throw 'upload pattern no match '+context.params.pathname.toLowerCase();
            }
        });    
}